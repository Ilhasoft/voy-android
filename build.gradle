// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.envs = [:]
    ext.versions = [
            'gradle'             : '3.0.1',
            'androidSupport'     : '26.1.0',
            'kotlin'             : '1.1.60',
            'constraintLayout'   : '1.0.2',
            'supportCore'        : '0.9.0',
            'retrofit'           : '2.3.0',
            'loggingInterceptor' : '3.8.0',
            'rxJava'             : '2.1.7',
            'rxAndroid'          : '2.0.1',
            'rxKotlin'           : '2.2.0',
            'rxBinding'          : '2.0.0',
            'glide'              : '4.3.1',
            'validator'          : '1.0.0',
            'circleImageView'    : '2.2.0',
            'flexboxLayout'      : '0.3.1',
            'timber'             : '4.6.0',
            'dispatcher'         : '3.1.0',
            'playServiceLocation': '11.8.0',
            'realm'              : '4.3.3',
            'multidex'           : '1.0.2',
            'mockito'            : '2.15.0',
            'jacoco'             : '0.8.0',
    ]
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'org.ow2.asm:asm:6.0'
        classpath "org.jacoco:org.jacoco.core:${versions.jacoco}"
        classpath "com.android.tools.build:gradle:${versions.gradle}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${versions.kotlin}"
        classpath 'io.fabric.tools:gradle:1.25.1'
        classpath "io.realm:realm-gradle-plugin:${versions.realm}"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://github.com/mak0t0san/stetho-realm/raw/master/maven-repo' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task loadEnv(dependsOn: ':app:build') {
    def files = file(rootProject.projectDir).listFiles().findAll { it.name.endsWith(".env") }

    files.each { File file ->
        if (file.isFile()) {
            file.text.eachLine { line ->
                def entries = line.split("=")
                envs[entries[0]] = entries[1]
            }
        }

    }
}

